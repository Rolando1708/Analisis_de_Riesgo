p_final[i] <- ds[127]
}
mean(p_final>3)
T <- 20/252
dt <- T/20
t <- seq(0,T,length.out=21)
sim <- 1000000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(20)))
St1 <- So*exp((mu-.5*sigma^2)*t+sigma*W)
p_final[i] <- St1[21]
}
mean(p_final>18)
sim <- 1000000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(20)))
ds <- So*mu*t+So*sigma*W
p_final[i] <- ds[21]
}
mean(p_final>3)
T <- 20  # 20 años
n <- 240  # 240 meses
dt <- T/n
t <- seq(0, T, length.out = n + 1)
sim <- 1000000  # Número de simulaciones
So <- 10  # Precio inicial
mu <- 0.05  # Rendimiento medio
sigma <- 0.2  # Volatilidad
probabilidades <- numeric(n)
for (j in 1:n) {
p_final <- numeric(sim)
for (i in 1:sim) {
W_final <- sum(sqrt(dt) * rnorm(j))
St_final <- So * exp((mu - 0.5 * sigma^2) * t[j + 1] + sigma * W_final)
p_final[i] <- St_final
}
probabilidades[j] <- mean(p_final > 18)
}
T <- 20  # 20 años
n <- 240  # 240 meses
dt <- T/n
t <- seq(0, T, length.out = n + 1)
sim <- 1000000  # Número de simulaciones
So <- 15  # Precio inicial
mu <- 0.15  # Rendimiento medio
sigma <- 0.65  # Volatilidad
probabilidades <- numeric(n)
for (j in 1:n) {
p_final <- numeric(sim)
for (i in 1:sim) {
W_final <- sum(sqrt(dt) * rnorm(j))
St_final <- So * exp((mu - 0.5 * sigma^2) * t[j + 1] + sigma * W_final)
p_final[i] <- St_final
}
probabilidades[j] <- mean(p_final > 18)
}
library(quantmod)
library(lubridate)
clave <- "BIMBOA.MX"
datos <- new.env()
getSymbols(clave, from="2024-02-01", to="2025-02-01", env=datos)
precio <- datos[[clave]][,6]
plot(precio)
rendimiento <- na.omit(diff(log(precio)))
set.seed(123)
mu <- mean(rendimiento)*252
sigma <- sd(rendimiento)*sqrt(252)
So <- as.numeric(tail(precio,1))
T <- 5/252
dt <- T/5
t <- seq(0,T,length.out=6)
mu
sigma
So
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(5)))
St1 <- So*exp((mu-.5*sigma^2)*t+sigma*W)
p_final[i] <- St1[6]
}
mean(p_final<So)
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(5)))
ds <- So*mu*t+So*sigma*W
p_final[i] <- ds[6]
}
mean(p_final<0)
mu <- mean(rendimiento)*252
sigma <- sd(rendimiento)*sqrt(252)
So <- as.numeric(tail(precio,1))
T <- 1
dt <- T/252
t <- seq(0,T,length.out=252)
mu
sigma
So
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(251)))
St1 <- So*exp((mu-.5*sigma^2)*t+sigma*W)
p_final[i] <- St1[252]
}
mean(p_final<So)
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(251)))
ds <- So*mu*t+So*sigma*W
p_final[i] <- ds[252]
}
mean(p_final<0)
mu <- 0.15
sigma <- 0.65
So <- 15
T <- 1
dt <- T/252
t <- seq(0,T,length.out=252)
mu
sigma
So
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(251)))
St1 <- So*exp((mu-.5*sigma^2)*t+sigma*W)
p_final[i] <- St1[252]
}
mean(p_final>18)
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(251)))
ds <- So*mu*t+So*sigma*W
p_final[i] <- ds[252]
}
mean(p_final>3)
T <- 126/252
dt <- T/126
t <- seq(0,T,length.out=127)
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(126)))
St1 <- So*exp((mu-.5*sigma^2)*t+sigma*W)
p_final[i] <- St1[127]
}
mean(p_final>18)
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(126)))
ds <- So*mu*t+So*sigma*W
p_final[i] <- ds[127]
}
mean(p_final>3)
T <- 20/252
dt <- T/20
t <- seq(0,T,length.out=21)
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(20)))
St1 <- So*exp((mu-.5*sigma^2)*t+sigma*W)
p_final[i] <- St1[21]
}
mean(p_final>18)
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(20)))
ds <- So*mu*t+So*sigma*W
p_final[i] <- ds[21]
}
mean(p_final>3)
T <- 20  # 20 años
n <- 240  # 240 meses
dt <- T/n
t <- seq(0, T, length.out = n + 1)
sim <- 100000  # Número de simulaciones
So <- 15  # Precio inicial
mu <- 0.15  # Rendimiento medio
sigma <- 0.65  # Volatilidad
probabilidades <- numeric(n)
for (j in 1:n) {
p_final <- numeric(sim)
for (i in 1:sim) {
W_final <- sum(sqrt(dt) * rnorm(j))
St_final <- So * exp((mu - 0.5 * sigma^2) * t[j + 1] + sigma * W_final)
p_final[i] <- St_final
}
probabilidades[j] <- mean(p_final > 18)
}
# Gráfica de la probabilidad en función del tiempo
plot(1:n, probabilidades, type = "l", col = "blue", lwd = 2,
xlab = "Tiempo (meses)", ylab = "Probabilidad de S_t > 18",
main = "Evolución de la probabilidad en el tiempo")
T <- 20  # 20 años
n <- 240  # 240 meses
dt <- T/n
t <- seq(0, T, length.out = n + 1)
sim <- 100000  # Reducir el número de simulaciones para mejorar el rendimiento
So <- 10  # Precio inicial
mu <- 0.05  # Rendimiento medio
sigma <- 0.2  # Volatilidad
probabilidades <- numeric(n)
for (j in 1:n) {
W_final <- sqrt(j * dt) * rnorm(sim)  # Generar todas las simulaciones a la vez
ds_final <- So * mu * t[j + 1] + So * sigma * W_final  # Modificar fórmula según el nuevo modelo
probabilidades[j] <- mean(ds_final > 18)
}
# Gráfica de la probabilidad en función del tiempo
plot(1:n, probabilidades, type = "l", col = "blue", lwd = 2,
xlab = "Tiempo (meses)", ylab = "Probabilidad de S_t > 18",
main = "Evolución de la probabilidad en el tiempo")
T <- 20  # 20 años
n <- 240  # 240 meses
dt <- T/n
t <- seq(0, T, length.out = n + 1)
sim <- 100000  # Reducir el número de simulaciones para mejorar el rendimiento
So <- 15  # Precio inicial
mu <- 0.15  # Rendimiento medio
sigma <- 0.65  # Volatilidad
probabilidades <- numeric(n)
for (j in 1:n) {
W_final <- sqrt(j * dt) * rnorm(sim)  # Generar todas las simulaciones a la vez
ds_final <- So * mu * t[j + 1] + So * sigma * W_final  # Modificar fórmula según el nuevo modelo
probabilidades[j] <- mean(ds_final > 18)
}
# Gráfica de la probabilidad en función del tiempo
plot(1:n, probabilidades, type = "l", col = "blue", lwd = 2,
xlab = "Tiempo (meses)", ylab = "Probabilidad de S_t > 18",
main = "Evolución de la probabilidad en el tiempo")
T <- 20  # 20 años
n <- 240  # 240 meses
dt <- T/n
t <- seq(0, T, length.out = n + 1)
sim <- 100000  # Reducir el número de simulaciones para mejorar el rendimiento
So <- 15  # Precio inicial
mu <- 0.15  # Rendimiento medio
sigma <- 0.65  # Volatilidad
probabilidades <- numeric(n)
for (j in 1:n) {
W_final <- sqrt(j * dt) * rnorm(sim)  # Generar todas las simulaciones a la vez
ds_final <- So * mu * t[j + 1] + So * sigma * W_final  # Modificar fórmula según el nuevo modelo
probabilidades[j] <- mean(ds_final > 18)
}
# Gráfica de la probabilidad en función del tiempo
plot(1:n, probabilidades, type = "l", col = "blue", lwd = 2,
xlab = "Tiempo (meses)", ylab = "Probabilidad de S_t > 18",
main = "Evolución de la probabilidad en el tiempo")
grid()
T <- 20  # 20 años
n <- 240  # 240 meses
dt <- T/n
t <- seq(0, T, length.out = n + 1)
sim <- 100000  # Número de simulaciones
So <- 15  # Precio inicial
mu <- 0.15  # Rendimiento medio
sigma <- 0.65  # Volatilidad
probabilidades <- numeric(n)
for (j in 1:n) {
p_final <- numeric(sim)
for (i in 1:sim) {
W_final <- sum(sqrt(dt) * rnorm(j))
St_final <- So * exp((mu - 0.5 * sigma^2) * t[j + 1] + sigma * W_final)
p_final[i] <- St_final
}
probabilidades[j] <- mean(p_final > 18)
}
# Gráfica de la probabilidad en función del tiempo
plot(1:n, probabilidades, type = "l", col = "blue", lwd = 2,
xlab = "Tiempo (meses)", ylab = "Probabilidad de S_t > 18",
main = "Evolución de la probabilidad en el tiempo")
grid()
library(quantmod)
library(lubridate)
clave <- "BIMBOA.MX"
datos <- new.env()
getSymbols(clave, from="2024-02-01", to="2025-02-01", env=datos)
precio <- datos[[clave]][,6]
plot(precio)
rendimiento <- na.omit(diff(log(precio)))
set.seed(123)
mu <- mean(rendimiento)*252
sigma <- sd(rendimiento)*sqrt(252)
So <- as.numeric(tail(precio,1))
T <- 5/252
dt <- T/5
t <- seq(0,T,length.out=6)
mu
sigma
So
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(5)))
St1 <- So*exp((mu-.5*sigma^2)*t+sigma*W)
p_final[i] <- St1[6]
}
mean(p_final<So)
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(5)))
ds <- So*mu*t+So*sigma*W
p_final[i] <- ds[6]
}
mean(p_final<0)
mu <- mean(rendimiento)*252
sigma <- sd(rendimiento)*sqrt(252)
So <- as.numeric(tail(precio,1))
T <- 1
dt <- T/252
t <- seq(0,T,length.out=252)
mu
sigma
So
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(251)))
St1 <- So*exp((mu-.5*sigma^2)*t+sigma*W)
p_final[i] <- St1[252]
}
mean(p_final<So)
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(251)))
ds <- So*mu*t+So*sigma*W
p_final[i] <- ds[252]
}
mean(p_final<0)
mu <- 0.15
sigma <- 0.65
So <- 15
T <- 1
dt <- T/252
t <- seq(0,T,length.out=252)
mu
sigma
So
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(251)))
St1 <- So*exp((mu-.5*sigma^2)*t+sigma*W)
p_final[i] <- St1[252]
}
mean(p_final>18)
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(251)))
ds <- So*mu*t+So*sigma*W
p_final[i] <- ds[252]
}
mean(p_final>3)
T <- 126/252
dt <- T/126
t <- seq(0,T,length.out=127)
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(126)))
St1 <- So*exp((mu-.5*sigma^2)*t+sigma*W)
p_final[i] <- St1[127]
}
mean(p_final>18)
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(126)))
ds <- So*mu*t+So*sigma*W
p_final[i] <- ds[127]
}
mean(p_final>3)
T <- 20/252
dt <- T/20
t <- seq(0,T,length.out=21)
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(20)))
St1 <- So*exp((mu-.5*sigma^2)*t+sigma*W)
p_final[i] <- St1[21]
}
mean(p_final>18)
sim <- 100000
p_final <- numeric(sim)
for(i in 1:sim){
W <- c(0,cumsum(sqrt(dt)*rnorm(20)))
ds <- So*mu*t+So*sigma*W
p_final[i] <- ds[21]
}
mean(p_final>3)
T <- 20
n <- 240
dt <- T/n
t <- seq(0, T, length.out = n + 1)
sim <- 100000
So <- 15
mu <- 0.15
sigma <- 0.65
probabilidades <- numeric(n)
for (j in 1:n) {
p_final <- numeric(sim)
for (i in 1:sim) {
W_final <- sum(sqrt(dt) * rnorm(j))
St_final <- So * exp((mu - 0.5 * sigma^2) * t[j + 1] + sigma * W_final)
p_final[i] <- St_final
}
probabilidades[j] <- mean(p_final > 18)
}
plot(1:n, probabilidades, type = "l", col = "blue", lwd = 2,
xlab = "Tiempo (meses)", ylab = "Probabilidad de S_t > 18",
main = "Evolución de la probabilidad en el tiempo")
grid()
T <- 20
n <- 240
dt <- T/n
t <- seq(0, T, length.out = n + 1)
sim <- 100000
So <- 15
mu <- 0.15
sigma <- 0.65
probabilidades <- numeric(n)
for (j in 1:n) {
W_final <- sqrt(j * dt) * rnorm(sim)
ds_final <- So * mu * t[j + 1] + So * sigma * W_final
probabilidades[j] <- mean(ds_final > 18)
}
plot(1:n, probabilidades, type = "l", col = "blue", lwd = 2,
xlab = "Tiempo (meses)", ylab = "Probabilidad de S_t > 18",
main = "Evolución de la probabilidad en el tiempo")
grid()
suppressPackageStartupMessages(library(quantmod))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(readxl))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(zoo))
clave <- "GCC.MX"
datos <- new.env()
getSymbols(clave, to="2024-12-31", env=datos)
PIB <- read_xlsx("CrecimientoPIB.xlsx")
suppressPackageStartupMessages(library(quantmod))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(readxl))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(zoo))
clave <- "GCC.MX"
datos <- new.env()
getSymbols(clave, to="2024-12-31", env=datos)
PIB <- read_xlsx("CrecimientoPIB.xlsx")
PIB$Year <- as.Date(paste0(PIB$Year, "-12-31"))
PIB$PorcentualAnnuealGrowthRate <- PIB$PorcentualAnnuealGrowthRate/100
PIB <- xts(PIB$PorcentualAnnuealGrowthRate, order.by = PIB$Year)
titulo <- "Precio histórico de GCC desde su salida a bolsa hasta 2024"
precio <- datos[[clave]][,6]
plot(precio, type="l", ylab="Precio", col="cornflowerblue", main=titulo)
titulo_rt <- "Rendimientos logarítmicos Diarios de GCC"
rt <- na.omit(diff(log(precio)))
plot(rt, col="cornflowerblue", main=titulo_rt)
rt_anual <- yearlyReturn(precio)
plot(rt_anual, type="l", ylab="Rendimiento", col="cornflowerblue", main="Rendimiento anual de GCC")
PIB2024 <- xts(
x = 0.0124,
order.by = as.Date("2024-12-31")
)
PIB <- rbind(PIB, PIB2024)
plot(PIB, type="l", ylab="Crecimiento", col="cornflowerblue", main="Tasa de crecimiento del PIB en México")
# Ajustar las fechas de rt_anual para que coincidan con el 31 de diciembre
index(rt_anual) <- as.Date(paste0(year(index(rt_anual)), "-12-31"))
# Fusionar las series asegurando que no se pierdan datos
merged_data <- merge(rt_anual, PIB, join="outer")
# Renombrar columnas para mayor claridad
colnames(merged_data) <- c("Rendimiento_GCC", "Crecimiento_PIB")
# Verificar si hay valores NA y rellenarlos con interpolación lineal
merged_data <- na.approx(merged_data)  # Solo si hay valores faltantes
# Graficar ambas series en paneles separados
plot(merged_data, multi.panel=TRUE, col=c("blue", "red"),
main="Comparación entre el Rendimiento de GCC y el Crecimiento del PIB en México")
colnames(merged_data) <- c("Crecimiento_PIB", "Rendimiento_GCC")
PIB_compuesto <- cumprod(1 + merged_data$Crecimiento_PIB)
rt_compuesto <- cumprod(1 + merged_data$Rendimiento_GCC)
names(PIB_compuesto) <- "PIB"
names(rt_compuesto) <- "GCC"
plot(merge.xts(PIB_compuesto, rt_compuesto), type="l",
main="Comparación del Crecimiento Compuesto de GCC y el PIB en México",
col=c("cornflowerblue", "indianred"), legend.loc="bottom")
colnames(merged_data) <- c("Crecimiento_PIB", "Rendimiento_GCC")
PIB_compuesto <- cumprod(1 + merged_data$Crecimiento_PIB)
rt_compuesto <- cumprod(1 + merged_data$Rendimiento_GCC)
# Normalizar
PIB_compuesto <- PIB_compuesto / as.numeric(first(PIB_compuesto))
rt_compuesto <- rt_compuesto / as.numeric(first(rt_compuesto))
names(PIB_compuesto) <- "PIB"
names(rt_compuesto) <- "GCC"
plot(merge.xts(PIB_compuesto, rt_compuesto), type="l",
main="Comparación del Crecimiento Compuesto Normalizado de GCC y el PIB en México",
col=c("cornflowerblue", "indianred"), legend.loc="bottom")
cambios_fuertes <- diff(precio) / lag(precio, 1)
cambios_significativos <- which(abs(cambios_fuertes) > 0.1)  # Filtrar cambios mayores al 10%
cambios_fechas <- index(precio)[cambios_significativos]
cambios_valores <- precio[cambios_significativos]
data.frame(Fecha = cambios_fechas, Cambio = cambios_valores)
